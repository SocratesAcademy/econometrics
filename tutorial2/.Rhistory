head(df, n = 4)
tail(df, n = 4)
df %>%
slice(c(1:3, 8:10)) %>%
knitr::kable()
View(df)
df %>%
slice(c(1:3, 10:13)) %>%
knitr::kable()
df %>%
slice(c(1:3, 11:14)) %>%
knitr::kable()
library(plm)
set.seed(7)
df <- tibble(id = sort(rep(1:1000, 10)),
time = rep(1:10, 1000),
x1 = rnorm(10000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 15*x2 + rnorm(10000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
library(plm)
set.seed(7)
df <- tibble(id = sort(rep(1:1000, 10)),
time = rep(1:10, 1000),
x1 = rnorm(10000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 15*x2 + rnorm(10000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
library(plm)
set.seed(7)
df <- tibble(id = sort(rep(1:1000, 10)),
time = rep(1:10, 1000),
x1 = rnorm(10000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 30*x2 + rnorm(10000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(777)
df <- tibble(id = sort(rep(1:1000, 10)),
time = rep(1:10, 1000),
x1 = rnorm(10000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 30*x2 + rnorm(10000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
library(plm)
set.seed(7)
df <- tibble(id = sort(rep(1:1000, 10)),
time = rep(1:10, 1000),
x1 = rnorm(10000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 15*x2 + rnorm(10000))
df %>%
slice(c(1:3, 11:14)) %>%
knitr::kable()
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
library(plm)
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 15*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(777)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 15*x2 + rnorm(6000))
df %>%
slice(c(1:3, 11:14)) %>%
knitr::kable()
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
library(plm)
set.seed(777)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 3*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
?plm
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), effect = c("twoways"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), effect = c("twoways"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), effect = c("twoways"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), effect = c("twoways"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), effect = "twoways", df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), effect = "twoways", df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), effect = "individual", df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), effect = "individual", df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 3*x2 + rnorm(6000))
df %>%
slice(c(1:3, 11:14)) %>%
knitr::kable()
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 500*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 25*x1 + 50*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 2*x1 + 50*x2 + rnorm(6000))
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 2*x1 + 20*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 2*x1 + 30*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 2*x1 + 50*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# add a correlated individual effect in x1
x1 = rnorm(6000) + 0.1*id,
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 2*x1 + 50*x2 + rnorm(6000))
pooled_corr <- plm(y ~ x1 + x2, model = "pooling", df)
fixed_corr  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random_corr <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled_corr, fixed_corr, random_corr), stars = TRUE, gof_omit = '^(?!Num)')
```{r, echo = TRUE}
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 5*x1 + 50*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
x1 = rnorm(6000),
# fixed variable within individual, e.g. gender
x2 = ifelse(id %% 2 == 0, 1, 0),
y = id + time + 3*x1 + 50*x2 + rnorm(6000))
pooled <- plm(y ~ x1 + x2, model = "pooling", df) # or lm(y ~ x1 + x2, df)
fixed  <- plm(y ~ x1 + x2, model = "within", index = c("id", "time"), df)
random <- plm(y ~ x1 + x2, model = "random", index = c("id", "time"), df)
msummary(list(pooled, fixed, random), stars = TRUE, gof_omit = '^(?!Num)')
pagedown::chrome_print("tutorial2.html",output="tutorial2.pdf")
pagedown::chrome_print("tutorial2.html",output="tutorial2.pdf")
pagedown::chrome_print("tutorial2.html",output="tutorial2.pdf")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dpi = 200, fig.width = 8, fig.height = 5)
library(tidyverse)
library(gganimate)
library(estimatr)
library(magick)
library(dagitty)
library(ggthemes)
library(directlabels)
library(ggdag)
library(jtools)
library(scales)
library(Cairo)
library(modelsummary)
library(stargazer)
library(wooldridge)
library(transformr)
library(huxtable)
theme_metro <- function(x) {
theme_classic() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
text = element_text(size = 16),
axis.title.x = element_text(hjust = 1),
axis.title.y = element_text(hjust = 1, angle = 0))
}
theme_void_metro <- function(x) {
theme_void() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
text = element_text(size = 16))
}
theme_metro_regtitle <- function(x) {
theme_classic() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
text = element_text(size = 16))
}
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
library(fixest)
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
```{r, echo = FALSE}
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id*runif(6000, 0, 1) + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id*rnorm(6000, 0, 100) + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id*rnorm(6000, 0, 1) + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5000*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (50*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (100*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
?plm
# The true effect is 2
library(plm) # package to estimate FE and RE models (fixest is preferred for FE)
?plm
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (50*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (100*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (1000*id + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id*time + rnorm(6000)))
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*id*time + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000),
# Now the error term has two components:
# 1. the individual cluster (5*id),
# 2. the normal error term (rnorm(6000))
y = id + time + 2*x1 + (5*time + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000))
individuals <- tibble(id = 1:600,
c = rnorm(600))
# Join them
df <- df %>%
full_join(individuals, by = 'id') %>%
# The error term has two components: the individual
# cluster C, and the individual-and-time-varying element
mutate(y = id + time + 2*x1 + (c + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000))
individuals <- tibble(id = 1:600,
c = rnorm(600))
# Join them
df <- df %>%
full_join(individuals, by = 'id') %>%
# The error term has two components: the individual
# cluster C, and the individual-and-time-varying element
mutate(y = id + time + 2*x1 + (c + rnorm(6000)))
View(df)
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
individuals <- tibble(id = 1:600,
c = runif(600, 0, 1))
set.seed(7)
df <- tibble(id = sort(rep(1:600, 10)),
time = rep(1:10, 600),
# we don't generate x2 as FE eliminates it anyway
x1 = rnorm(6000))
individuals <- tibble(id = 1:600,
c = runif(600, 0, 1))
# Join them
df <- df %>%
full_join(individuals, by = 'id') %>%
# The error term has two components: the individual
# cluster C, and the individual-and-time-varying element
mutate(y = id + time + 2*x1 + (c + rnorm(6000)))
# The true effect is 2
fe_clustered     <- feols(y ~ x1 | id + time, df)
fe_not_clustered <- feols(y ~ x1 | id + time, se = 'standard', df) # make s.e. i.i.d.
msummary(list(fe_clustered, fe_not_clustered), stars = TRUE, gof_omit = '^(?!Num|Std)')
pagedown::chrome_print("tutorial2.html",output="tutorial2.pdf")
